# In this example, we are using secrets stored in the same namespace as the Netbird deployment.
# It is based for nginx ingress, but it can be modified to fit your needs
# It uses authentik as the IdP manager and an external PostgreSQL as the store engine.
# The secrets are created by the user and are not part of the Netbird chart.
# In the configmap you can refer to env variables by using {{ .envVarName }}. (Requires netbid v0.30.1+)
fullnameOverride: netbird
management:
  configmap: |-
    {
      "Stuns": [
        {
          "Proto": "udp",
          "URI": "{{ .STUN_SERVER }}",
          "Username": "",
          "Password": ""
        }
      ],
      "TURNConfig": {
        "TimeBasedCredentials": false,
        "CredentialsTTL": "12h0m0s",
        "Secret": "secret",
        "Turns": [
          {
            "Proto": "udp",
            "URI": "{{ .TURN_SERVER }}",
            "Username": "{{ .TURN_SERVER_USER }}",
            "Password": "{{ .TURN_SERVER_PASSWORD }}"
          }
        ]
      },
      "Relay": {
        "Addresses": [
          "rels://netbird.example.com:443/relay"
        ],
        "CredentialsTTL": "24h",
        "Secret": "{{ .RELAY_PASSWORD }}"
      },
      "Signal": {
        "Proto": "https",
        "URI": "netbird.example.com:443",
        "Username": "",
        "Password": ""
      },
      "Datadir": "/var/lib/netbird/",
      "DataStoreEncryptionKey": "{{ .DATASTORE_ENCRYPTION_KEY }}",
      "HttpConfig": {
        "LetsEncryptDomain": "",
        "CertFile": "",
        "CertKey": "",
        "AuthAudience": "{{ .IDP_CLIENT_ID }}",
        "AuthIssuer": "https://idp.example.com/application/o/example-netbird/",
        "AuthUserIDClaim": "",
        "AuthKeysLocation": "https://idp.example.com/application/o/example-netbird/jwks/",
        "OIDCConfigEndpoint": "https://idp.example.com/application/o/example-netbird/.well-known/openid-configuration",
        "IdpSignKeyRefreshEnabled": false
      },
      "IdpManagerConfig": {
        "ManagerType": "authentik",
        "ClientConfig": {
          "Issuer": "https://idp.example.com/application/o/example-netbird",
          "TokenEndpoint": "https://idp.example.com/application/o/token/",
          "ClientID": "{{ .IDP_CLIENT_ID }}",
          "ClientSecret": "",
          "GrantType": "client_credentials"
        },
        "ExtraConfig": {
          "Password": "{{ .IDP_SERVICE_ACCOUNT_PASSWORD }}",
          "Username": "{{ .IDP_SERVICE_ACCOUNT_USER }}"
        },
        "Auth0ClientCredentials": null,
        "AzureClientCredentials": null,
        "KeycloakClientCredentials": null,
        "ZitadelClientCredentials": null
      },
      "DeviceAuthorizationFlow": {
        "Provider": "hosted",
        "ProviderConfig": {
          "ClientID": "{{ .IDP_CLIENT_ID }}",
          "ClientSecret": "",
          "Domain": "idp.example.com",
          "Audience": "{{ .IDP_CLIENT_ID }}",
          "TokenEndpoint": "https://idp.example.com/application/o/token/",
          "DeviceAuthEndpoint": "https://idp.example.com/application/o/device/",
          "AuthorizationEndpoint": "",
          "Scope": "openid",
          "UseIDToken": false,
          "RedirectURLs": null
        }
      },
      "PKCEAuthorizationFlow": {
        "ProviderConfig": {
          "ClientID": "{{ .IDP_CLIENT_ID }}",
          "ClientSecret": "",
          "Domain": "",
          "Audience": "{{ .IDP_CLIENT_ID }}",
          "TokenEndpoint": "https://idp.example.com/application/o/token/",
          "DeviceAuthEndpoint": "",
          "AuthorizationEndpoint": "https://idp.example.com/application/o/authorize/",
          "Scope": "openid profile email offline_access api",
          "UseIDToken": false,
          "RedirectURLs": [
            "http://localhost:53000"
          ]
        }
      },
      "StoreConfig": {
        "Engine": "postgres"
      },
      "ReverseProxy": {
        "TrustedHTTPProxies": null,
        "TrustedHTTPProxiesCount": 0,
        "TrustedPeers": null
      }
    }

  image:
    tag: 0.30.2

  ingress:
    enabled: true
    className: public
    annotations:
      cert-manager.io/cluster-issuer: example-issuer
    hosts:
      - host: netbird.example.com
        paths:
          - path: /api
            pathType: ImplementationSpecific
    tls:
      - secretName: netbird-api-tls
        hosts:
          - netbird.example.com
  ingressGrpc:
    enabled: true
    className: public
    annotations:
      cert-manager.io/cluster-issuer: example-issuer
      nginx.ingress.kubernetes.io/backend-protocol: GRPC
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/server-snippet: |
        grpc_connect_timeout 3600s;
        grpc_read_timeout 3600s;
        grpc_send_timeout 3600s;
    hosts:
      - host: netbird.example.com
        paths:
          - path: /management.ManagementService
            pathType: ImplementationSpecific
    tls:
      - secretName: netbird-grpc-tls
        hosts:
          - netbird.example.com

  persistentVolume:
    enabled: false

  secretName: netbird
  envFromSecret:
    - name: NETBIRD_STORE_ENGINE_POSTGRES_DSN
      key: postgresDSN
    - name: STUN_SERVER
      key: stunServer
    - name: TURN_SERVER
      key: turnServer
    - name: TURN_SERVER_USER
      key: turnServerUser
    - name: TURN_SERVER_PASSWORD
      key: turnServerPassword
    - name: RELAY_PASSWORD
      key: relayPassword
    - name: IDP_CLIENT_ID
      key: idpClientID
    - name: IDP_SERVICE_ACCOUNT_USER
      key: idpServiceAccountUser
    - name: IDP_SERVICE_ACCOUNT_PASSWORD
      key: idpServiceAccountPassword
    - name: DATASTORE_ENCRYPTION_KEY
      key: datastoreEncryptionKey

signal:
  image:
    tag: 0.30.2
  ingress:
    enabled: true
    className: public
    annotations:
      cert-manager.io/cluster-issuer: example-issuer
      nginx.ingress.kubernetes.io/backend-protocol: GRPC
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/server-snippet: |
        grpc_connect_timeout 3600s;
        grpc_read_timeout 3600s;
        grpc_send_timeout 3600s;
    hosts:
      - host: netbird.example.com
        paths:
          - path: /signalexchange.SignalExchange
            pathType: ImplementationSpecific
    tls:
      - secretName: netbird-signal-tls
        hosts:
          - netbird.example.com

relay:
  image:
    tag: 0.30.2
  ingress:
    enabled: true
    className: public
    annotations:
      cert-manager.io/cluster-issuer: example-issuer
    hosts:
      - host: netbird.example.com
        paths:
          - path: /relay
            pathType: ImplementationSpecific
    tls:
      - secretName: netbird-relay-tls
        hosts:
          - netbird.example.com
  secretName: netbird
  envFromSecret:
    - name: NB_AUTH_SECRET
      key: relayPassword
  env:
    NB_LOG_LEVEL: info
    NB_LISTEN_ADDRESS: ":33080"
    NB_EXPOSED_ADDRESS: rels://netbird.example.com:443/relay

dashboard:
  enabled: true
  ingress:
    enabled: true
    className: public
    annotations:
      cert-manager.io/cluster-issuer: example-issuer
    hosts:
      - host: netbird-dashboard.example.com
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls:
      - secretName: netbird-dashboard-tls
        hosts:
          - netbird-dashboard.example.com
  image:
    tag: v2.6.1
  env:
    # Endpoints
    NETBIRD_MGMT_API_ENDPOINT: https://netbird.example.com:443
    NETBIRD_MGMT_GRPC_API_ENDPOINT: https://netbird.example.com:443
    # OIDC
    AUTH_CLIENT_SECRET:
    AUTH_AUTHORITY: https://idp.example.com/application/o/example-netbird/
    USE_AUTH0: false
    AUTH_SUPPORTED_SCOPES: openid profile email offline_access api
    AUTH_REDIRECT_URI:
    AUTH_SILENT_REDIRECT_URI:
    NETBIRD_TOKEN_SOURCE: accessToken
    NGINX_SSL_PORT:
    LETSENCRYPT_DOMAIN:
    LETSENCRYPT_EMAIL:
  secretName: netbird
  envFromSecret:
    - name: AUTH_CLIENT_ID
      key: idpClientID
    - name: AUTH_AUDIENCE
      key: idpClientID

### The k8s secret should look like this:

#apiVersion: v1
#kind: Secret
#metadata:
#  name: netbird
#type: Opaque
#data:
#  idpClientID: xxxxxx
#  idpServiceAccountPassword: xxxxxx
#  idpServiceAccountUser: xxxxxx
#  postgresDSN: xxxxxx
#  relayPassword: xxxxxx
#  stunServer: xxxxxx
#  turnServer: xxxxxx
#  turnServerPassword: xxxxxx
#  turnServerUser: xxxxxx
#  datastoreEncryptionKey: xxxxxxx #(Created with openssl rand -base64 32)
