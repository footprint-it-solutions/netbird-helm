## @section NetBird Parameters
global:
  namespace: ""

## @param nameOverride Override the name of the chart.
##
nameOverride: ""

## @param fullnameOverride Override the full name of the chart.
##
fullnameOverride: ""

## @section NetBird Management

management:
  ## @param management.enabled Enable or disable NetBird management component.
  ##
  enabled: true

  ## @param management.podCommand Define the arguments for the management pod.
  ##
  podCommand:
    args:
     - --port=80
     - --log-file=console
     - --log-level=info
     - --disable-anonymous-metrics=false
     - --single-account-mode-domain=netbird.example.com
     - --dns-domain=netbird.selfhosted

  configmap: |-  # Placeholder for ConfigMap data

  lifecycle: {}  # Define lifecycle hooks (preStop, postStart) if needed.

  secretName: "netbird"  # Reference to the Kubernetes secret used by the management component.

  ## @param management.replicaCount Number of management pod replicas.
  ##
  replicaCount: 1

  ## @param management.env Environment variables for the management pod.
  ##
  env: {}

  ## @param management.envRaw Raw environment variables for the management pod.
  ##
  envRaw: []
    #- name: NETBIRD_STORE_ENGINE_POSTGRES_DSN
    #  valueFrom:
    #    secretKeyRef:
    #      name: netbird-management
    #      key: postgresDSN

  ## @param management.envFromSecret Environment variables from secrets.
  ##
  envFromSecret: []
    #- name: CUSTOM_VAR_1
    #  key: key1
    #- name: CUSTOM_VAR_2
    #  key: key2

  image:
    ## @param management.image.repository Docker image repository for the management component.
    ##
    repository: netbirdio/management

    ## @param management.image.pullPolicy Docker image pull policy.
    ##
    pullPolicy: IfNotPresent

    ## @param management.image.tag Docker image tag. Overrides the default tag.
    ##
    tag: ""

  ## @param management.imagePullSecrets Docker registry credentials for pulling the management image.
  ##
  imagePullSecrets: []

  serviceAccount:
    ## @param management.serviceAccount.create Whether to create a service account.
    ##
    create: true

    ## @param management.serviceAccount.annotations Annotations for the service account.
    ##
    annotations: {}

    ## @param management.serviceAccount.name Name of the service account to use.
    ##
    name: ""

  ## @param management.deploymentAnnotations Annotations for the management deployment.
  ##
  deploymentAnnotations: {}

  ## @param management.podAnnotations Annotations for the management pod(s).
  ##
  podAnnotations: {}

  ## @param management.podSecurityContext Security context for the management pod(s).
  ##
  podSecurityContext: {}
    # fsGroup: 2000

  ## @param management.securityContext Security context for the management container.
  ##
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    ## @param management.service.type Service type for the management component.
    ##
    type: ClusterIP

    ## @param management.service.port Port for the management service.
    ##
    port: 80

    ## @param management.service.name Name for the management service.
    ##
    name: http


  ingress:
    ## @param management.ingress.enabled Enable or disable ingress for the management component.
    ##
    enabled: false

    ## @param management.ingress.className Ingress class name.
    ##
    className: ""

    ## @param management.ingress.annotations Annotations for the ingress resource.
    ##
    annotations: {}

    hosts:
      ## @param management.ingress.hosts[0].host Host for the ingress.
      ##
      - host: example.com
        paths:
          ## @param management.ingress.hosts[0].paths[0].path Path for the ingress.
          ##
          - path: /
            ## @param management.ingress.hosts[0].paths[0].pathType Path type for the ingress.
            ##
            pathType: ImplementationSpecific

    ## @param management.ingress.tls TLS settings for the ingress.
    ##
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  ingressGrpc:
    ## @param management.ingressGrpc.enabled Enable or disable GRPC ingress.
    ##
    enabled: true

    ## @param management.ingressGrpc.className Ingress class name for GRPC.
    ##
    className: ""

    ## @param management.ingressGrpc.annotations Annotations for the GRPC ingress resource.
    ##
    annotations: {}

    hosts:
      ## @param management.ingressGrpc.hosts[0].host Host for GRPC ingress.
      ##
      - host: example.com
        paths:
          ## @param management.ingressGrpc.hosts[0].paths[0].path Path for GRPC ingress.
          ##
          - path: /
            ## @param management.ingressGrpc.hosts[0].paths[0].pathType Path type for GRPC ingress.
            ##
            pathType: ImplementationSpecific

    ## @param management.ingressGrpc.tls TLS settings for GRPC ingress.
    ##
    tls: []

  ## @param management.resources Resource requests and limits for the management pod.
  ##
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  ## @param management.nodeSelector Node selector for scheduling the management pod.
  ##
  nodeSelector: {}

  ## @param management.tolerations Tolerations for scheduling the management pod.
  ##
  tolerations: []

  ## @param management.affinity Affinity rules for scheduling the management pod.
  ##
  affinity: {}

  persistentVolume:
    ## @param management.persistentVolume.enabled Enable or disable persistent volume for the management pod.
    ##
    enabled: true

    ## @param management.persistentVolume.accessModes Access modes for the persistent volume.
    ##
    accessModes:
      - ReadWriteOnce

    ## @param management.persistentVolume.size Size of the persistent volume.
    ##
    size: 10Mi

  ## @param management.dnsDomain DNS domain for the management component.
  ##
  dnsDomain: netbird.selfhosted

## @section NetBird Signal

signal:
  enabled: true
  ## @param signal.logLevel Log level for the signal component.
  ##
  logLevel: info

  ## @param signal.replicaCount Number of signal pod replicas.
  ##
  replicaCount: 1

  image:
    ## @param signal.image.repository Docker image repository for the signal component.
    ##
    repository: netbirdio/signal

    ## @param signal.image.pullPolicy Docker image pull policy for the signal component.
    ##
    pullPolicy: IfNotPresent

    ## @param signal.image.tag Docker image tag for the signal component.
    ##
    tag: ""

  ## @param signal.imagePullSecrets Docker registry credentials for pulling the signal image.
  ##
  imagePullSecrets: []

  serviceAccount:
    ## @param signal.serviceAccount.create Whether to create a service account for the signal component.
    ##
    create: true

    ## @param signal.serviceAccount.annotations Annotations for the signal service account.
    ##
    annotations: {}

    ## @param signal.serviceAccount.name Name of the signal service account.
    ##
    name: ""

  ## @param signal.deploymentAnnotations Annotations for the signal deployment.
  ##
  deploymentAnnotations: {}

  ## @param signal.podAnnotations Annotations for the signal pod(s).
  ##
  podAnnotations: {}

  ## @param signal.podSecurityContext Security context for the signal pod(s).
  ##
  podSecurityContext: {}
    # fsGroup: 2000

  ## @param signal.securityContext Security context for the signal container.
  ##
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    ## @param signal.service.type Service type for the signal component.
    ##
    type: ClusterIP
    name: grpc
    ## @param signal.service.port Port for the signal service.
    ##
    port: 80

  ingress:
    ## @param signal.ingress.enabled Enable or disable ingress for the signal component.
    ##
    enabled: false

    ## @param signal.ingress.className Ingress class name for the signal component.
    ##
    className: ""

    ## @param signal.ingress.annotations Annotations for the signal ingress resource.
    ##
    annotations: {}

    hosts:
      ## @param signal.ingress.hosts[0].host Host for the signal ingress.
      ##
      - host: example.com
        paths:
          ## @param signal.ingress.hosts[0].paths[0].path Path for the signal ingress.
          ##
          - path: /signalexchange.SignalExchange
            ## @param signal.ingress.hosts[0].paths[0].pathType Path type for the signal ingress.
            ##
            pathType: ImplementationSpecific

    ## @param signal.ingress.tls TLS settings for the signal ingress.
    ##
    tls: []

  ## @


  ## param signal.resources Resource requests and limits for the signal pod.
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  ## @param signal.nodeSelector Node selector for scheduling the signal pod.
  ##
  nodeSelector: {}

  ## @param signal.tolerations Tolerations for scheduling the signal pod.
  ##
  tolerations: []

  ## @param signal.affinity Affinity rules for scheduling the signal pod.
  ##
  affinity: {}

  persistentVolume:
    ## @param signal.persistentVolume.enabled Enable or disable persistent volume for the signal component.
    ##
    enabled: true

    ## @param signal.persistentVolume.accessModes Access modes for the persistent volume.
    ##
    accessModes:
      - ReadWriteOnce

    ## @param signal.persistentVolume.size Size of the persistent volume for the signal component.
    ##
    size: 10Mi

## @section NetBird Relay Parameters

relay:
  ## @param relay.enabled Enable or disable the NetBird relay component.
  ##
  enabled: true

  ## @param relay.replicaCount Number of relay pod replicas.
  ##
  replicaCount: 1

  ## @param relay.logLevel Log level for the relay component.
  ##
  logLevel: info

  ## @param relay.env Environment variables for the management pod.
  ##
  env: {}

  ## @param relay.envRaw Raw environment variables for the management pod.
  ##
  envRaw: []

  ## @param relay.envFromSecret Environment variables from secrets.
  ##
  secretName: "netbird"  # Reference to the Kubernetes secret used by the relay component.

  ## @param relay.envFromSecret Environment variables from secrets.
  ##
  envFromSecret: []
    #- name: CUSTOM_VAR_1
    #  key: key1
    #- name: CUSTOM_VAR_2
    #  key: key2

  image:
    ## @param relay.image.repository Docker image repository for the relay component.
    ##
    repository: netbirdio/relay

    ## @param relay.image.pullPolicy Docker image pull policy for the relay component.
    ##
    pullPolicy: IfNotPresent

    ## @param relay.image.tag Docker image tag for the relay component.
    ##
    tag: ""

  ## @param relay.imagePullSecrets Docker registry credentials for pulling the relay image.
  ##
  imagePullSecrets: []

  serviceAccount:
    ## @param relay.serviceAccount.create Whether to create a service account for the relay component.
    ##
    create: true

    ## @param relay.serviceAccount.annotations Annotations for the relay service account.
    ##
    annotations: {}

    ## @param relay.serviceAccount.name Name of the relay service account.
    ##
    name: ""

  ## @param relay.deploymentAnnotations Annotations for the relay deployment.
  ##
  deploymentAnnotations: {}

  ## @param relay.podAnnotations Annotations for the relay pod(s).
  ##
  podAnnotations: {}

  ## @param relay.podSecurityContext Security context for the relay pod(s).
  ##
  podSecurityContext: {}
    # fsGroup: 2000

  ## @param relay.securityContext Security context for the relay container.
  ##
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    ## @param relay.service.type Service type for the relay component.
    ##
    type: ClusterIP

    ## @param relay.service.port Port for the relay service.
    ##
    port: 33080

    ## @param relay.service.name Name for the relay service.
    ##
    name: http

  ingress:
    ## @param relay.ingress.enabled Enable or disable ingress for the relay component.
    ##
    enabled: false

    ## @param relay.ingress.className Ingress class name for the relay component.
    ##
    className: ""

    ## @param relay.ingress.annotations Annotations for the relay ingress resource.
    ##
    annotations: {}

    hosts:
      ## @param relay.ingress.hosts[0].host Host for the relay ingress.
      ##
      - host: example.com
        paths:
          ## @param relay.ingress.hosts[0].paths[0].path Path for the relay ingress.
          ##
          - path: /relay
            ## @param relay.ingress.hosts[0].paths[0].pathType Path type for the relay ingress.
            ##
            pathType: ImplementationSpecific

    ## @param relay.ingress.tls TLS settings for the relay ingress.
    ##
    tls: []

  ## @param relay.resources Resource requests and limits for the relay pod.
  ##
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  ## @param relay.nodeSelector Node selector for scheduling the relay pod.
  ##
  nodeSelector: {}

  ## @param relay.tolerations Tolerations for scheduling the relay pod.
  ##
  tolerations: []

  ## @param relay.affinity Affinity rules for scheduling the relay pod.
  ##
  affinity: {}

dashboard:
  enabled: false

  ## @section Authorization

  auth:
    # yamllint disable-line rule:line-length
    ## @param auth.authority Authority to use for authentication. Must expose a .well-known/oidc-configuration endpoint.
    authority: http://keycloak.localtest.me:9000/realms/helm-charts

    ## @param auth.audience Audience of the authentication tokens.
    audience: "netbird-dashboard"

    ## @param auth.clientID OpenID Connect client ID.
    clientID: netbird-dashboard

    ## @param auth.supportedScopes Supported OpenID scopes
    # - Auth0: openid profile email offline_access api email_verified
    # - Keycloak: openid profile email offline_access api
    supportedScopes: openid profile email offline_access api

    ## @param auth.userIDClaim
    userIDClaim: sub

  ## @param netbird.disableIPv6
  disableIPv6: true

  ## @section Common configuration

  ## @descriptionStart
  ## This section contains parameters, that are common for most Helm charts.
  ## @descriptionEnd

  ## @param replicaCount Number of replicas to deploy
  replicaCount: 1

  image:
    ## @param image.repository image repository
    repository: netbirdio/dashboard

    ## @param image.pullPolicy image pull policy
    pullPolicy: IfNotPresent

    ## @param image.tag image tag (immutable tags are recommended)
    tag: "2.6.1"

  ## @param imagePullSecrets image pull secrets
  imagePullSecrets: []

  ## @param nameOverride String to partially override common.names.fullname
  nameOverride: ""

  ## @param fullnameOverride String to fully override common.names.fullname
  fullnameOverride: ""

  serviceAccount:
    ## @param serviceAccount.create Specifies whether a service account should be
    ## created
    create: true

    ## @param serviceAccount.annotations Annotations to add to the service account
    annotations: {}

    ## @param serviceAccount.name The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname
    # template
    name: ""

  ## @param podAnnotations Annotations for pods
  ## ref:
  ## https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  podAnnotations: {}

  ## Configure Pods Security Context
  ## ref:
  ## https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  ## @param podSecurityContext
  podSecurityContext:
    {}
    # fsGroup: 2000

  ## Configure Container Security Context
  ## ref:
  ## https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  ## @param securityContext
  securityContext:
    {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    ## @param service.type
    type: ClusterIP

    ## @param service.port
    port: 80

    ## @param service.name
    name: http

  ingress:
    ## @param ingress.enabled
    enabled: false

    ## @param ingress.className
    className: ""

    ## @param ingress.annotations
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"

    hosts:
      ## @param ingress.hosts[0].host
      - host: chart-example.local
        ## @param ingress.hosts[0].host
        paths:
          ## @param ingress.hosts[0].paths[0].path
          - path: /
            ## @param ingress.hosts[0].paths[0].pathType
            pathType: ImplementationSpecific

    ## @param ingress.tls
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  ## @param resources
  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a
    # conscious choice for the user. This also increases chances charts run on
    # environments with little resources, such as Minikube. If you do want to
    # specify resources, uncomment the following lines, adjust them as necessary,
    # and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  ## @param nodeSelector
  nodeSelector: {}

  ## @param tolerations
  tolerations: []

  ## @param affinity
  affinity: {}

  ## @param management.env
  ##
  env: {}

  ## @param management.envRaw
  ##
  envRaw: []

  ## @param management.envFromSecret
  ##
  envFromSecret: []
    #- name: CUSTOM_VAR_1
    #  key: key1

  secretName: ""

  lifecycle: {}  # Define lifecycle hooks (preStop, postStart) if needed.
